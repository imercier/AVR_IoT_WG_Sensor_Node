################################################################################
# File automatically generated by Atmel Start.
################################################################################
#
# Makefile for AVR8 IAR C/C++ compiler and assembler.
#
################################################################################
#
# WARNING: THIS IS AN EXPERIMENTAL FEATURE. Glitches may occur and
#          manual adjustments may be required.
#
# The IAR toolchain is not cross-platform. This is a GNU makefile for
# windows (cygwin or mingw32), rely on running it in wine on linux.
#
# Prerequisites: Must have access to valid IAR license, IAR_ROOT must be
# correctly specified (see below)
#
# Invocation: From project root folder:
#
# make [options] -f iar/Makefile
#
################################################################################
#### USER TWEAKABLE SETTINGS
################################################################################
# Version of IAR Embedded Workbench
IAR_VERSION ?= 8.0

# Root of IAR installation, override by user if needed
# Must use := assignment here courtesy of Cygwin
IAR_ROOT := "C:/Program Files (x86)/IAR Systems/Embedded Workbench $(IAR_VERSION)/avr"

# CONFIG is either debug or release. Intel Hex is produced for release.
CONFIG ?= debug

# IDE setting is either studio or c-spy (embedded workbench),
# affects the debug output format produced.
# For Studio, UBROF8 is produced. For c-spy, refer to -rt linker option.
IDE ?= studio

# Name of target image file (less extension).
TARGET ?= atmelstart

# Memory model, please see IAR compiler documentation.
MEM_MODEL ?= s

################################################################################
#### END OF USER TWEAKABLE SETTINGS
################################################################################

# Command-line tools used. Cannot use ?= here! These should not be changed.
CC = $(IAR_ROOT)/bin/iccavr.exe  
AS = $(IAR_ROOT)/bin/aavr.exe
LD = $(IAR_ROOT)/bin/xlink.exe



#Notice: No space between -I/-D and argument courtesy of IAR assembler
#
# IAR uses at least 3 different representations of device name
#
# CPU name is m*** for mega devices, xm*** for xmega devices, tiny***
# for tiny devices, all letters lower case. Example: m324pb, xm32a4u, tiny817
CPU ?= m4808

DEVICE ?= __ATmega4808__

INCLUDE_PATHS += -I"config" -I"examples/include" -I"include" -I"utils" -I"utils/assembler" -I"cryptoauthlib/lib" -I"." -I"include" 
EEPROM_SIZE = 256
OBJDIR = $(CONFIG)/obj
EXEDIR = $(CONFIG)/exe
SRC_DIRS +=  winc/spi_flash/source winc/driver/source cryptoauthlib/lib/crypto/hashes cloud/mqtt_packetPopulation winc/bus_wrapper/source cryptoauthlib/lib winc/bsp/source winc/socket/source credentials_storage cli cryptoauthlib/lib/tls cryptoauthlib/lib/crypto mqtt cryptoauthlib/lib/jwt mqtt/mqtt_exchange_buffer mqtt/mqtt_core examples/src cryptoauthlib/lib/hal cloud cryptoauthlib/lib/atcacert cryptoauthlib/lib/host cloud/bsd_adapter winc/common/source src cryptoauthlib/lib/basic mqtt/mqtt_comm_bsd cloud/crypto_client

# We use .o suffix rather than .r90 for all object files.

OBJS +=  \
$(OBJDIR)/atca_basic_ecdh.o \
$(OBJDIR)/nmasic.o \
$(OBJDIR)/mqtt_packetPopulate.o \
$(OBJDIR)/nmuart.o \
$(OBJDIR)/atca_basic.o \
$(OBJDIR)/nm_bsp_mega.o \
$(OBJDIR)/atca_basic_gendig.o \
$(OBJDIR)/atca_cfgs.o \
$(OBJDIR)/cryptoauthlib_main.o \
$(OBJDIR)/atca_basic_sign.o \
$(OBJDIR)/debug_print.o \
$(OBJDIR)/atca_jwt.o \
$(OBJDIR)/m2m_periph.o \
$(OBJDIR)/atca_execution.o \
$(OBJDIR)/mqtt_core.o \
$(OBJDIR)/atcacert_date.o \
$(OBJDIR)/atcatls.o \
$(OBJDIR)/protected_io.o \
$(OBJDIR)/atcacert_host_sw.o \
$(OBJDIR)/i2c_simple_master.o \
$(OBJDIR)/atca_basic_genkey.o \
$(OBJDIR)/sha1_routines.o \
$(OBJDIR)/mqtt_exchange_buffer.o \
$(OBJDIR)/atca_basic_kdf.o \
$(OBJDIR)/atca_crypto_sw_sha2.o \
$(OBJDIR)/atca_basic_derivekey.o \
$(OBJDIR)/m2m_crypto.o \
$(OBJDIR)/atca_basic_info.o \
$(OBJDIR)/nm_bus_wrapper_mega.o \
$(OBJDIR)/spi_flash.o \
$(OBJDIR)/atca_helpers.o \
$(OBJDIR)/atca_basic_lock.o \
$(OBJDIR)/atca_basic_mac.o \
$(OBJDIR)/atca_basic_privwrite.o \
$(OBJDIR)/atcacert_der.o \
$(OBJDIR)/wifi_service.o \
$(OBJDIR)/atca_basic_verify.o \
$(OBJDIR)/bod.o \
$(OBJDIR)/atcacert_host_hw.o \
$(OBJDIR)/bsdWINC.o \
$(OBJDIR)/i2c_types.o \
$(OBJDIR)/application_manager.o \
$(OBJDIR)/atca_command.o \
$(OBJDIR)/slpctrl.o \
$(OBJDIR)/atca_crypto_sw_ecdsa.o \
$(OBJDIR)/atca_device.o \
$(OBJDIR)/m2m_ate_mode.o \
$(OBJDIR)/atmel_start.o \
$(OBJDIR)/cloud_service.o \
$(OBJDIR)/adc_basic.o \
$(OBJDIR)/hal_atmega4809_timer.o \
$(OBJDIR)/atcacert_client.o \
$(OBJDIR)/atca_crypto_sw_sha1.o \
$(OBJDIR)/i2c_master.o \
$(OBJDIR)/socket.o \
$(OBJDIR)/led.o \
$(OBJDIR)/nmi2c.o \
$(OBJDIR)/mqtt_comm_layer.o \
$(OBJDIR)/timeout_example.o \
$(OBJDIR)/atca_hal.o \
$(OBJDIR)/nmdrv.o \
$(OBJDIR)/usart_basic.o \
$(OBJDIR)/atca_basic_aes.o \
$(OBJDIR)/atca_basic_read.o \
$(OBJDIR)/i2c_master_example.o \
$(OBJDIR)/atca_basic_checkmac.o \
$(OBJDIR)/m2m_wifi.o \
$(OBJDIR)/clkctrl.o \
$(OBJDIR)/nmbus.o \
$(OBJDIR)/driver_isr.o \
$(OBJDIR)/atca_basic_counter.o \
$(OBJDIR)/driver_init.o \
$(OBJDIR)/cpuint.o \
$(OBJDIR)/credentials_storage.o \
$(OBJDIR)/sensors_handling.o \
$(OBJDIR)/atca_basic_selftest.o \
$(OBJDIR)/m2m_ssl.o \
$(OBJDIR)/adc_basic_example.o \
$(OBJDIR)/crypto_client.o \
$(OBJDIR)/m2m_ota.o \
$(OBJDIR)/spi_basic.o \
$(OBJDIR)/atca_host.o \
$(OBJDIR)/sha2_routines.o \
$(OBJDIR)/atca_basic_nonce.o \
$(OBJDIR)/atca_basic_sha.o \
$(OBJDIR)/hal_atmega4809_i2c.o \
$(OBJDIR)/atca_basic_random.o \
$(OBJDIR)/nm_common.o \
$(OBJDIR)/nmspi.o \
$(OBJDIR)/usart_basic_example.o \
$(OBJDIR)/atcatls_cfg.o \
$(OBJDIR)/atca_iface.o \
$(OBJDIR)/main.o \
$(OBJDIR)/spi_basic_example.o \
$(OBJDIR)/atca_basic_write.o \
$(OBJDIR)/mqtt_packetTransfer_interface.o \
$(OBJDIR)/atca_basic_secureboot.o \
$(OBJDIR)/cli.o \
$(OBJDIR)/timeout.o \
$(OBJDIR)/atca_basic_hmac.o \
$(OBJDIR)/atca_basic_updateextra.o \
$(OBJDIR)/m2m_hif.o \
$(OBJDIR)/atca_crypto_sw_rand.o \
$(OBJDIR)/atcacert_def.o

# Used for assembler & linker options
arch = arch3

dlib = $(IAR_ROOT)/lib/dlib/dlAVR-3s-arch4-sf-n

cfgfile1 = $(IAR_ROOT)/src/template/cfg$(CPU).xcl
cfgfile2 = $(IAR_ROOT)/src/template/cfg_avr_arch4_1soim.xcl
AS_CPUFLAGS ?= -v3 -u_enhancedCore -D__HAS_ENHANCED_CORE__=1 -D__HAS_MUL__=1 -D__AVR_ARCH4__=1 -D__MEMORY_MODEL__=2 -D__ATmega4808__=1

################################################################################

CPPFLAGS = -D__$(CPU)__ -DF_CPU=10000000 $(INCLUDE_PATHS) \
  -DENABLE_BIT_DEFINITIONS
CFLAGS =  --cpu=$(CPU) -m$(MEM_MODEL) --initializers_in_flash -e --dlib \
  --dlib_config $(dlib).h --eeprom_size $(EEPROM_SIZE)
ASFLAGS += -s+ -w+ $(AS_CPUFLAGS)

LDFLAGS = -l $(CONFIG)/list/$(TARGET).map -f $(cfgfile1)  -f iar/avr8_iar.xcl -f $(cfgfile2) \
  -s __program_start $(dlib).r90 

vpath %.c $(SRC_DIRS)
vpath %.s $(SRC_DIRS)
vpath %.S $(SRC_DIRS)
vpath %.o $(OBJDIR)

ifeq (debug,$(CONFIG))
	OPTIMIZE ?= -Ol
	CFLAGS += --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug $(OPTIMIZE)
	ASFLAGS += -r
	ifeq (studio,$(IDE))
		# UBROF8 is the latest version supported by Studio.
		LDFLAGS += -Fubrof8
	else
		# Format for IAR C-SPY, not understood by Studio
		LDFLAGS += -rt
	endif
	EXE = $(EXEDIR)/$(TARGET).d90
else
	CPPFLAGS += -DNDEBUG
	OPTIMIZE ?= -Ohz
	CFLAGS += $(OPTIMIZE)
	LDFLAGS += -FINTEL-STANDARD
	EXE = $(EXEDIR)/$(TARGET).hex
endif


$(OBJDIR)/%.o: %.c
	$(CC) $^ $(CPPFLAGS) $(CFLAGS) -o$@ 

$(OBJDIR)/%.o: %.s
	$(AS) $^ $(INCLUDE_PATHS) $(ASFLAGS) -o $@

# IAR assembler has built-in preprocessor, no distinction between .s and .S
$(OBJDIR)/%.o: %.S
	$(AS) $^ $(INCLUDE_PATHS) $(ASFLAGS) -o $@

all: $(TARGET)

$(TARGET): dirs $(EXE)

$(EXE): $(OBJS)
	$(LD) $^ -o $@ $(LDFLAGS)


dirs:
	mkdir -p $(OBJDIR) $(EXEDIR) $(CONFIG)/list

clean:
	$(RM) $(OBJS) $(EXE)

.PHONY: all clean dirs $(TARGET)
